class MK():
    def __init__(self):
        # 初始技能水平
        self.efficency = None
        # 学习系数
        self.learning_rate = None
        # 遗忘系数
        self.forgetting_rate = None
        # 工件相似度
        self.delta = None
        # 学习效应极限
        self.theta = 0.75
        # 不可压缩因子
        self.M = 0.8

    def name(self):
        '''返回问题的名字'''
        pass

    def shape(self):
        '''返回问题规模'''
        return f"{self.name()}问题的规模为:{len(self.delta)}*{len(self.efficency)}"


class LF10(MK):
    '''20工件*10设备'''
    def __init__(self):
        super().__init__()
        self.efficency = [[1.03, 0.86, 1.03, 0.94, 1.12, 0.89, 1.09, 1.06, 0.86, 0.99],
                          [0.86, 1.06, 0.98, 0.9, 1.03, 1.08, 1.05, 1.09, 0.85, 0.87],
                          [1.03, 0.98, 1.1, 0.99, 0.95, 0.91, 1.01, 1.12, 0.94, 0.93],
                          [0.94, 0.9, 0.99, 1.06, 1.07, 1.0, 0.87, 1.02, 0.97, 0.91],
                          [1.12, 1.03, 0.95, 1.07, 1.1, 1.14, 1.04, 0.99, 1.14, 0.9],
                          [0.89, 1.08, 0.91, 1.0, 1.14, 0.97, 1.01, 0.92, 0.89, 1.0],
                          [1.09, 1.05, 1.01, 0.87, 1.04, 1.01, 0.98, 0.93, 1.0, 1.04],
                          [1.06, 1.09, 1.12, 1.02, 0.99, 0.92, 0.93, 0.85, 0.88, 0.94],
                          [0.86, 0.85, 0.94, 0.97, 1.14, 0.89, 1.0, 0.88, 1.1, 0.91],
                          [0.99, 0.87, 0.93, 0.91, 0.9, 1.0, 1.04, 0.94, 0.91, 0.94]]
        self.learning_rate = [[-0.22, -0.23, -0.23, -0.21, -0.3, -0.22, -0.19, -0.2, -0.2, -0.15],
                              [-0.23, -0.3, -0.22, -0.21, -0.26, -0.22, -0.16, -0.3, -0.27, -0.17],
                              [-0.23, -0.22, -0.23, -0.18, -0.18, -0.29, -0.25, -0.24, -0.23, -0.17],
                              [-0.21, -0.21, -0.18, -0.18, -0.19, -0.19, -0.27, -0.2, -0.16, -0.21],
                              [-0.3, -0.26, -0.18, -0.19, -0.27, -0.17, -0.26, -0.27, -0.27, -0.29],
                              [-0.22, -0.22, -0.29, -0.19, -0.17, -0.19, -0.26, -0.18, -0.3, -0.25],
                              [-0.19, -0.16, -0.25, -0.27, -0.26, -0.26, -0.21, -0.22, -0.27, -0.29],
                              [-0.2, -0.3, -0.24, -0.2, -0.27, -0.18, -0.22, -0.28, -0.27, -0.19],
                              [-0.2, -0.27, -0.23, -0.16, -0.27, -0.3, -0.27, -0.27, -0.23, -0.27],
                              [-0.15, -0.17, -0.17, -0.21, -0.29, -0.25, -0.29, -0.19, -0.27, -0.16]]
        self.forgetting_rate = [[0.17, 0.17, 0.19, 0.17, 0.17, 0.18, 0.19, 0.2, 0.23, 0.15],
                                [0.17, 0.21, 0.16, 0.23, 0.16, 0.23, 0.18, 0.25, 0.19, 0.18],
                                [0.19, 0.16, 0.2, 0.21, 0.2, 0.24, 0.17, 0.24, 0.19, 0.18],
                                [0.17, 0.23, 0.21, 0.16, 0.19, 0.15, 0.21, 0.15, 0.22, 0.24],
                                [0.17, 0.16, 0.2, 0.19, 0.19, 0.16, 0.2, 0.19, 0.2, 0.17],
                                [0.18, 0.23, 0.24, 0.15, 0.16, 0.22, 0.22, 0.25, 0.23, 0.18],
                                [0.19, 0.18, 0.17, 0.21, 0.2, 0.22, 0.23, 0.16, 0.22, 0.21],
                                [0.2, 0.25, 0.24, 0.15, 0.19, 0.25, 0.16, 0.22, 0.16, 0.23],
                                [0.23, 0.19, 0.19, 0.22, 0.2, 0.23, 0.22, 0.16, 0.18, 0.2],
                                [0.15, 0.18, 0.18, 0.24, 0.17, 0.18, 0.21, 0.23, 0.2, 0.17]]
        self.delta = [[1.0, 0.6, 0.6, 0.6, 0.6, 0.5, 0.6, 0.7, 0.9, 0.7, 0.5, 0.9, 0.6, 0.6, 0.6, 0.9, 0.5, 0.4, 0.7, 1.0],
                      [0.6, 1.0, 0.8, 0.5, 0.5, 0.6, 0.9, 0.9, 0.6, 0.9, 0.6, 1.0, 1.0, 0.4, 0.7, 0.8, 0.7, 0.5, 0.8, 0.8],
                      [0.6, 0.8, 1.0, 0.6, 0.5, 0.7, 0.5, 0.9, 0.7, 0.9, 0.4, 0.8, 0.7, 0.7, 0.6, 0.8, 0.4, 0.7, 0.8, 0.8],
                      [0.6, 0.5, 0.6, 1.0, 0.7, 0.8, 0.8, 0.6, 0.5, 0.6, 0.4, 0.4, 0.9, 0.9, 0.5, 0.8, 1.0, 0.8, 0.4, 0.7],
                      [0.6, 0.5, 0.5, 0.7, 1.0, 0.8, 0.7, 0.8, 1.0, 0.9, 0.9, 0.7, 0.7, 0.6, 0.6, 0.9, 0.4, 0.9, 1.0, 0.7],
                      [0.5, 0.6, 0.7, 0.8, 0.8, 1.0, 0.6, 0.7, 0.8, 0.9, 0.7, 0.8, 0.4, 1.0, 0.5, 0.4, 0.7, 0.4, 0.9, 0.7],
                      [0.6, 0.9, 0.5, 0.8, 0.7, 0.6, 1.0, 0.7, 0.8, 0.6, 0.6, 0.9, 0.9, 0.8, 0.6, 0.8, 0.5, 0.7, 1.0, 0.5],
                      [0.7, 0.9, 0.9, 0.6, 0.8, 0.7, 0.7, 1.0, 0.7, 0.5, 0.6, 0.9, 0.7, 0.5, 0.4, 0.6, 1.0, 0.4, 0.8, 0.6],
                      [0.9, 0.6, 0.7, 0.5, 1.0, 0.8, 0.8, 0.7, 1.0, 0.9, 0.5, 0.5, 0.4, 0.6, 0.8, 0.5, 0.6, 0.8, 0.5, 0.8],
                      [0.7, 0.9, 0.9, 0.6, 0.9, 0.9, 0.6, 0.5, 0.9, 1.0, 0.5, 0.5, 0.4, 0.7, 0.8, 0.6, 0.6, 0.6, 0.8, 0.8],
                      [0.5, 0.6, 0.4, 0.4, 0.9, 0.7, 0.6, 0.6, 0.5, 0.5, 1.0, 0.5, 0.9, 0.7, 0.6, 0.5, 0.7, 0.7, 0.8, 0.6],
                      [0.9, 1.0, 0.8, 0.4, 0.7, 0.8, 0.9, 0.9, 0.5, 0.5, 0.5, 1.0, 0.7, 0.4, 0.8, 1.0, 0.9, 0.5, 0.9, 0.4],
                      [0.6, 1.0, 0.7, 0.9, 0.7, 0.4, 0.9, 0.7, 0.4, 0.4, 0.9, 0.7, 1.0, 0.6, 0.8, 0.9, 0.6, 0.4, 0.6, 0.6],
                      [0.6, 0.4, 0.7, 0.9, 0.6, 1.0, 0.8, 0.5, 0.6, 0.7, 0.7, 0.4, 0.6, 1.0, 0.7, 0.7, 0.8, 0.7, 1.0, 0.6],
                      [0.6, 0.7, 0.6, 0.5, 0.6, 0.5, 0.6, 0.4, 0.8, 0.8, 0.6, 0.8, 0.8, 0.7, 1.0, 0.9, 0.7, 0.5, 0.8, 0.5],
                      [0.9, 0.8, 0.8, 0.8, 0.9, 0.4, 0.8, 0.6, 0.5, 0.6, 0.5, 1.0, 0.9, 0.7, 0.9, 1.0, 0.5, 0.8, 0.5, 0.8],
                      [0.5, 0.7, 0.4, 1.0, 0.4, 0.7, 0.5, 1.0, 0.6, 0.6, 0.7, 0.9, 0.6, 0.8, 0.7, 0.5, 1.0, 0.5, 0.8, 0.6],
                      [0.4, 0.5, 0.7, 0.8, 0.9, 0.4, 0.7, 0.4, 0.8, 0.6, 0.7, 0.5, 0.4, 0.7, 0.5, 0.8, 0.5, 1.0, 0.7, 0.9],
                      [0.7, 0.8, 0.8, 0.4, 1.0, 0.9, 1.0, 0.8, 0.5, 0.8, 0.8, 0.9, 0.6, 1.0, 0.8, 0.5, 0.8, 0.7, 1.0, 0.4],
                      [1.0, 0.8, 0.8, 0.7, 0.7, 0.7, 0.5, 0.6, 0.8, 0.8, 0.6, 0.4, 0.6, 0.6, 0.5, 0.8, 0.6, 0.9, 0.4, 1.0]]

    def name(self):
        return "LF10"
