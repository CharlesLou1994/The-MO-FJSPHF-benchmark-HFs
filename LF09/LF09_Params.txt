class MK():
    def __init__(self):
        # 初始技能水平
        self.efficency = None
        # 学习系数
        self.learning_rate = None
        # 遗忘系数
        self.forgetting_rate = None
        # 工件相似度
        self.delta = None
        # 学习效应极限
        self.theta = 0.75
        # 不可压缩因子
        self.M = 0.8

    def name(self):
        '''返回问题的名字'''
        pass

    def shape(self):
        '''返回问题规模'''
        return f"{self.name()}问题的规模为:{len(self.delta)}*{len(self.efficency)}"


class LF09(MK):
    '''20工件*5设备'''
    def __init__(self):
        super().__init__()
        self.efficency = [[1.03, 1.05, 0.96, 0.9, 1.1],
                          [1.05, 1.04, 0.94, 1.08, 0.92],
                          [0.96, 0.94, 1.13, 1.11, 0.94],
                          [0.9, 1.08, 1.11, 1.02, 0.91],
                          [1.1, 0.92, 0.94, 0.91, 1.13]]
        self.learning_rate = [[-0.27, -0.19, -0.18, -0.26, -0.16],
                              [-0.19, -0.27, -0.28, -0.15, -0.19],
                              [-0.18, -0.28, -0.25, -0.15, -0.28],
                              [-0.26, -0.15, -0.15, -0.21, -0.16],
                              [-0.16, -0.19, -0.28, -0.16, -0.17]]

        self.forgetting_rate = [[0.17, 0.23, 0.23, 0.23, 0.19],
                                [0.23, 0.16, 0.22, 0.2, 0.21],
                                [0.23, 0.22, 0.19, 0.19, 0.18],
                                [0.23, 0.2, 0.19, 0.16, 0.25],
                                [0.19, 0.21, 0.18, 0.25, 0.2]]

        self.delta = [[1.0, 0.9, 0.4, 0.5, 0.8, 0.9, 0.6, 0.5, 0.9, 0.6, 0.6, 0.4, 0.7, 0.9, 0.6, 0.6, 0.7, 0.6, 0.6, 0.7],
                      [0.9, 1.0, 0.8, 0.8, 1.0, 0.9, 0.7, 0.4, 0.9, 0.6, 0.5, 0.8, 0.4, 1.0, 0.5, 0.8, 0.8, 0.9, 0.9, 0.5],
                      [0.4, 0.8, 1.0, 0.8, 0.5, 0.5, 0.5, 0.5, 0.7, 0.7, 0.8, 0.5, 1.0, 0.5, 0.4, 0.9, 1.0, 0.5, 0.6, 0.7],
                      [0.5, 0.8, 0.8, 1.0, 0.5, 0.6, 0.9, 1.0, 0.4, 0.4, 0.6, 0.7, 1.0, 0.4, 0.5, 0.8, 0.8, 0.8, 0.4, 0.7],
                      [0.8, 1.0, 0.5, 0.5, 1.0, 0.6, 0.6, 0.8, 0.8, 0.8, 0.5, 0.6, 0.9, 0.9, 0.8, 0.7, 0.9, 0.5, 0.9, 0.5],
                      [0.9, 0.9, 0.5, 0.6, 0.6, 1.0, 0.8, 0.6, 0.6, 0.6, 0.5, 0.6, 0.7, 0.9, 0.7, 0.9, 0.6, 0.5, 0.8, 0.9],
                      [0.6, 0.7, 0.5, 0.9, 0.6, 0.8, 1.0, 0.8, 0.9, 0.9, 0.6, 0.5, 0.9, 0.6, 0.7, 1.0, 0.8, 0.5, 1.0, 0.8],
                      [0.5, 0.4, 0.5, 1.0, 0.8, 0.6, 0.8, 1.0, 0.7, 1.0, 0.8, 0.5, 0.5, 0.8, 0.5, 0.7, 0.5, 0.7, 0.4, 0.7],
                      [0.9, 0.9, 0.7, 0.4, 0.8, 0.6, 0.9, 0.7, 1.0, 0.9, 0.8, 0.8, 0.5, 0.5, 0.6, 0.8, 1.0, 0.7, 0.7, 0.6],
                      [0.6, 0.6, 0.7, 0.4, 0.8, 0.6, 0.9, 1.0, 0.9, 1.0, 0.4, 0.9, 0.9, 0.5, 0.9, 0.4, 0.7, 0.8, 0.4, 0.8],
                      [0.6, 0.5, 0.8, 0.6, 0.5, 0.5, 0.6, 0.8, 0.8, 0.4, 1.0, 0.4, 0.4, 0.7, 0.8, 0.6, 1.0, 0.9, 0.7, 0.9],
                      [0.4, 0.8, 0.5, 0.7, 0.6, 0.6, 0.5, 0.5, 0.8, 0.9, 0.4, 1.0, 0.8, 0.8, 0.8, 1.0, 0.5, 0.7, 0.6, 1.0],
                      [0.7, 0.4, 1.0, 1.0, 0.9, 0.7, 0.9, 0.5, 0.5, 0.9, 0.4, 0.8, 1.0, 0.6, 0.6, 0.8, 0.6, 0.8, 0.7, 0.8],
                      [0.9, 1.0, 0.5, 0.4, 0.9, 0.9, 0.6, 0.8, 0.5, 0.5, 0.7, 0.8, 0.6, 1.0, 1.0, 0.6, 0.7, 1.0, 0.7, 0.9],
                      [0.6, 0.5, 0.4, 0.5, 0.8, 0.7, 0.7, 0.5, 0.6, 0.9, 0.8, 0.8, 0.6, 1.0, 1.0, 0.4, 0.5, 0.5, 0.6, 0.4],
                      [0.6, 0.8, 0.9, 0.8, 0.7, 0.9, 1.0, 0.7, 0.8, 0.4, 0.6, 1.0, 0.8, 0.6, 0.4, 1.0, 0.9, 0.9, 0.5, 0.5],
                      [0.7, 0.8, 1.0, 0.8, 0.9, 0.6, 0.8, 0.5, 1.0, 0.7, 1.0, 0.5, 0.6, 0.7, 0.5, 0.9, 1.0, 0.6, 0.5, 0.8],
                      [0.6, 0.9, 0.5, 0.8, 0.5, 0.5, 0.5, 0.7, 0.7, 0.8, 0.9, 0.7, 0.8, 1.0, 0.5, 0.9, 0.6, 1.0, 1.0, 0.4],
                      [0.6, 0.9, 0.6, 0.4, 0.9, 0.8, 1.0, 0.4, 0.7, 0.4, 0.7, 0.6, 0.7, 0.7, 0.6, 0.5, 0.5, 1.0, 1.0, 0.8],
                      [0.7, 0.5, 0.7, 0.7, 0.5, 0.9, 0.8, 0.7, 0.6, 0.8, 0.9, 1.0, 0.8, 0.9, 0.4, 0.5, 0.8, 0.4, 0.8, 1.0]]

    def name(self):
        return "LF09"
